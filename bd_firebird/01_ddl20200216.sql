/******************************************************************************/
/*            Generated by IBExpert 2020.1.6.1 16.02.2020 15:11:50            */
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

CREATE DATABASE 'D:\Hackathons\20200215_16 NiNo TenderHackNiNo\Work\employee_mos_ru.fdb'
USER 'SYSDBA' PASSWORD '3333'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR COMPANY_ID_SEQ START WITH 0 INCREMENT BY 1;
SET GENERATOR COMPANY_ID_SEQ TO 5;

CREATE GENERATOR COMPETENCE_ID_SEQ START WITH 0 INCREMENT BY 1;
SET GENERATOR COMPETENCE_ID_SEQ TO 13;

CREATE GENERATOR EMP_ID_SEQ START WITH 0 INCREMENT BY 1;
SET GENERATOR EMP_ID_SEQ TO 3;

CREATE GENERATOR TEAM_ID_SEQ START WITH 0 INCREMENT BY 1;
SET GENERATOR TEAM_ID_SEQ TO 0;

CREATE GENERATOR VACANCY_ID_SEQ START WITH 0 INCREMENT BY 1;
SET GENERATOR VACANCY_ID_SEQ TO 6;



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE IUD_COMPANY (
    IFLAG CHAR(1),
    ICOMPANY_ID INTEGER,
    ICOMPANY_NAME VARCHAR(500),
    IADDRESS VARCHAR(500),
    IINN VARCHAR(50),
    IKPP VARCHAR(50),
    IEMAIL VARCHAR(100),
    IPHONE VARCHAR(500))
RETURNS (
    OCOMPANY_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IUD_COMPETENCE (
    IFLAG CHAR(10),
    ICOMP_ID INTEGER,
    ICOMP_NAME VARCHAR(500),
    ICOMP_DESC VARCHAR(500))
RETURNS (
    OCOMP_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IUD_EMPLOYEE (
    IFLAG CHAR(1),
    IEMP_ID INTEGER,
    IFIRST_NAME VARCHAR(100),
    ILAST_NAME VARCHAR(100),
    IMIDDLE_NAME VARCHAR(100),
    ICITY VARCHAR(100))
RETURNS (
    OEMP_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IUD_TEAM (
    IFLAG CHAR(1),
    ITEAM_ID INTEGER,
    ITEAM_NAME VARCHAR(500))
RETURNS (
    OTEAM_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE IUD_VACANCY (
    IFLAG CHAR(10),
    IVAC_ID INTEGER,
    IVAC_NAME VARCHAR(500),
    ICOMPANY_ID INTEGER,
    ISALARY_FROM DOUBLE PRECISION,
    ISALARY_TO DOUBLE PRECISION,
    IEXPERIENCE DOUBLE PRECISION,
    IVAC_TYPE INTEGER,
    ICITY VARCHAR(500))
RETURNS (
    OVAC_ID INTEGER)
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE COMP_EMP (
    COMPANY_ID  INTEGER,
    EMP_ID      INTEGER
);

CREATE TABLE COMPANY (
    COMPANY_ID    INTEGER NOT NULL,
    COMPANY_NAME  VARCHAR(500),
    ADDRESS       VARCHAR(500),
    KPP           VARCHAR(50),
    INN           VARCHAR(50),
    EMAIL         VARCHAR(100),
    PHONE         VARCHAR(500)
);

CREATE TABLE COMPETENCE (
    COMP_ID    INTEGER NOT NULL,
    COMP_NAME  VARCHAR(500),
    COMP_DESC  VARCHAR(500)
);

CREATE TABLE DEALS (
    VAC_ID     INTEGER,
    EMP_ID     INTEGER,
    DEAL_DATE  DATE
);

CREATE TABLE EMP_COMPET (
    EMP_ID      INTEGER,
    COMP_ID     INTEGER,
    EXPERIENCE  DOUBLE PRECISION,
    SALARY_EXP  DOUBLE PRECISION
);

CREATE TABLE EMPLOYEE (
    EMP_ID       INTEGER NOT NULL,
    FIRST_NAME   VARCHAR(100),
    LAST_NAME    VARCHAR(100),
    MIDDLE_NAME  VARCHAR(100),
    CITY         VARCHAR(100),
    FIO          VARCHAR(300)
);

CREATE TABLE TEAM (
    TEAM_ID    INTEGER NOT NULL,
    TEAM_NAME  VARCHAR(500)
);

CREATE TABLE TEAM_EMP (
    TEAM_ID  INTEGER,
    EMP_ID   INTEGER
);

CREATE TABLE VAC_COMPET (
    VAC_ID   INTEGER NOT NULL,
    COMP_ID  INTEGER NOT NULL
);

CREATE TABLE VACANCY (
    VAC_ID       INTEGER NOT NULL,
    VAC_NAME     VARCHAR(500),
    COMPANY_ID   INTEGER NOT NULL,
    SALARY_FROM  DOUBLE PRECISION,
    SALARY_TO    DOUBLE PRECISION,
    EXPERIENCE   DOUBLE PRECISION,
    VAC_TYPE     INTEGER,
    CITY         VARCHAR(500)
);



/******************************************************************************/
/*                                   Views                                    */
/******************************************************************************/


/* View: V$EMPLOYEES */
CREATE VIEW V$EMPLOYEES(
    FIO,
    CITY,
    EXPERIENCE,
    LIST_OF_COMPET,
    SALARY_EXP)
AS
select
  e.fio,
  e.city,
  ec.experience,
  list(c.comp_name, ', ') list_of_compet,
  ec.salary_exp
from
  emp_compet ec,
  employee e,
  competence c
where 0=0
  and e.emp_id = ec.emp_id
  and c.comp_id = ec.comp_id
group by e.fio,
         e.city,
         ec.experience,
         ec.salary_exp
;



/* View: V_$EMPLOYEES */
CREATE VIEW V_$EMPLOYEES(
    FIO,
    CITY,
    EXPERIENCE,
    LIST_OF_COMPET,
    SALARY_EXP)
AS
select
  e.fio,
  e.city,
  ec.experience,
  list(c.comp_name, ', ') list_of_compet,
  ec.salary_exp
from
  emp_compet ec,
  employee e,
  competence c
where 0=0
  and e.emp_id = ec.emp_id
  and c.comp_id = ec.comp_id
group by e.fio,
         e.city,
         ec.experience,
         ec.salary_exp
;



/* View: V_$VACANCIES */
CREATE VIEW V_$VACANCIES(
    VAC_ID,
    COMPANY_NAME,
    VAC_NAME,
    LIST_OF_COMPET,
    SALARY_FROM,
    SALARY_TO,
    EXPERIENCE,
    CITY,
    VAC_TYPE_NAME)
AS
select
  t.vac_id,
  t.company_name,
  t.vac_name,
  list(t.comp_name, ', ') list_of_compet,
  t.salary_from,
  t.salary_to,
  t.experience,
  t.city,
  t.vac_type_name
from(
    select
      v.vac_id,
      c.company_name,
      v.vac_name,
      c2.comp_name,
      v.salary_from,
      v.salary_to,
      v.experience,
      v.city,
      decode(v.vac_type, 1, 'sale', 2, 'rent', '<тип не определен>') vac_type_name
    from
      vacancy v,
      company c,
      vac_compet vc,
      competence c2
    where 0=0
      and c.company_id = v.company_id
      and v.vac_id = vc.vac_id
      and vc.comp_id = c2.comp_id) t
group by t.vac_id,
  t.company_name,
  t.vac_name,
  t.salary_from,
  t.salary_to,
  t.experience,
  t.city,
  t.vac_type_name
;




/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE COMPANY ADD CONSTRAINT PK_COMPANY PRIMARY KEY (COMPANY_ID);
ALTER TABLE COMPETENCE ADD CONSTRAINT PK_COMPETENCE PRIMARY KEY (COMP_ID);
ALTER TABLE EMPLOYEE ADD CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMP_ID);
ALTER TABLE TEAM ADD CONSTRAINT PK_TEAM PRIMARY KEY (TEAM_ID);
ALTER TABLE VACANCY ADD CONSTRAINT PK_VACANCY PRIMARY KEY (VAC_ID);


/******************************************************************************/
/*                                Foreign keys                                */
/******************************************************************************/

ALTER TABLE COMP_EMP ADD CONSTRAINT FK_COMP_EMP_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);
ALTER TABLE COMP_EMP ADD CONSTRAINT FK_COMP_EMP_EMPLOYEE FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID);
ALTER TABLE DEALS ADD CONSTRAINT FK_DEALS_EMPLOYEE FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID);
ALTER TABLE DEALS ADD CONSTRAINT FK_DEALS_VACANCY FOREIGN KEY (VAC_ID) REFERENCES VACANCY (VAC_ID);
ALTER TABLE EMP_COMPET ADD CONSTRAINT FK_EMP_COMPET_COMPETENCE FOREIGN KEY (COMP_ID) REFERENCES COMPETENCE (COMP_ID);
ALTER TABLE EMP_COMPET ADD CONSTRAINT FK_EMP_COMPET_EMPLOYEE FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID);
ALTER TABLE TEAM_EMP ADD CONSTRAINT FK_TEAM_EMP_EMPLOYEE FOREIGN KEY (EMP_ID) REFERENCES EMPLOYEE (EMP_ID);
ALTER TABLE TEAM_EMP ADD CONSTRAINT FK_TEAM_EMP_TEAM FOREIGN KEY (TEAM_ID) REFERENCES TEAM (TEAM_ID);
ALTER TABLE VACANCY ADD CONSTRAINT FK_VACANCY_COMPANY FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY (COMPANY_ID);
ALTER TABLE VAC_COMPET ADD CONSTRAINT FK_VAC_COMPET_COMPETENCE FOREIGN KEY (COMP_ID) REFERENCES COMPETENCE (COMP_ID);
ALTER TABLE VAC_COMPET ADD CONSTRAINT FK_VAC_COMPET_VACANCY FOREIGN KEY (VAC_ID) REFERENCES VACANCY (VAC_ID);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: COMPANY_BI */
CREATE TRIGGER COMPANY_BI FOR COMPANY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.COMPANY_ID IS NULL) THEN
  BEGIN
    SELECT GEN_ID(COMPANY_ID_SEQ, 1)
    FROM RDB$DATABASE
    INTO NEW.COMPANY_ID;
  END
end
^

/* Trigger: COMPETENCE_BI */
CREATE TRIGGER COMPETENCE_BI FOR COMPETENCE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.COMP_ID IS NULL) THEN
  BEGIN
    SELECT GEN_ID(COMPETENCE_ID_SEQ, 1)
    FROM RDB$DATABASE
    INTO NEW.COMP_ID;
  END
end
^

/* Trigger: EMPLOYEE_BI */
CREATE TRIGGER EMPLOYEE_BI FOR EMPLOYEE
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.EMP_ID IS NULL) THEN
  BEGIN
    SELECT GEN_ID(EMP_ID_SEQ, 1)
    FROM RDB$DATABASE
    INTO NEW.EMP_ID;
  END
end
^

/* Trigger: TEAM_BI */
CREATE TRIGGER TEAM_BI FOR TEAM
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.TEAM_ID IS NULL) THEN
  BEGIN
    SELECT GEN_ID(TEAM_ID_SEQ, 1)
    FROM RDB$DATABASE
    INTO NEW.TEAM_ID;
  END
end
^

/* Trigger: VACANCY_BI */
CREATE TRIGGER VACANCY_BI FOR VACANCY
ACTIVE BEFORE INSERT POSITION 0
AS
begin
  IF (NEW.VAC_ID IS NULL) THEN
  BEGIN
    SELECT GEN_ID(VACANCY_ID_SEQ, 1)
    FROM RDB$DATABASE
    INTO NEW.VAC_ID;
  END
end
^
SET TERM ; ^



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE IUD_COMPANY (
    IFLAG CHAR(1),
    ICOMPANY_ID INTEGER,
    ICOMPANY_NAME VARCHAR(500),
    IADDRESS VARCHAR(500),
    IINN VARCHAR(50),
    IKPP VARCHAR(50),
    IEMAIL VARCHAR(100),
    IPHONE VARCHAR(500))
RETURNS (
    OCOMPANY_ID INTEGER)
AS
begin
  if (:iflag = 'I' or :iflag = 'U' ) then
  begin
    if (:iflag = 'I') then
      insert into company(company_name, address, inn, kpp, email, phone)
      values(:icompany_name, :iaddress, :iinn, :ikpp, :iemail, :iphone)
      returning company_id into ocompany_id;
    else
      update company
      set
        company_name = :icompany_name,
        address = :iaddress,
        inn = :iinn,
        kpp = :ikpp,
        email = :iemail,
        phone = :iphone
      where company_id = :icompany_id;
  end /*
  else if (:iflag = 'D') then
  begin
    null;
  end
  */

  suspend;
end^


ALTER PROCEDURE IUD_COMPETENCE (
    IFLAG CHAR(10),
    ICOMP_ID INTEGER,
    ICOMP_NAME VARCHAR(500),
    ICOMP_DESC VARCHAR(500))
RETURNS (
    OCOMP_ID INTEGER)
AS
begin
  if (:iflag = 'I' or :iflag = 'U' ) then
  begin
    if (:iflag = 'I') then
      insert into competence(comp_name, comp_desc)
      values(:icomp_name, :icomp_desc)
      returning comp_id into ocomp_id;
    else
      update competence
      set
        comp_name = :icomp_name,
        comp_desc = :icomp_desc
      where comp_id = :icomp_id;
  end /*
  else if (:iflag = 'D') then
  begin
    null;
  end
  */

  suspend;
end^


ALTER PROCEDURE IUD_EMPLOYEE (
    IFLAG CHAR(1),
    IEMP_ID INTEGER,
    IFIRST_NAME VARCHAR(100),
    ILAST_NAME VARCHAR(100),
    IMIDDLE_NAME VARCHAR(100),
    ICITY VARCHAR(100))
RETURNS (
    OEMP_ID INTEGER)
AS
begin
  if (:iflag = 'I' or :iflag = 'U' ) then
  begin
    if (:iflag = 'I') then
      insert into employee(first_name, last_name, middle_name, city)
      values(:ifirst_name, :ilast_name, :imiddle_name, :icity)
      returning emp_id into oemp_id;
    else
      update employee
      set
        first_name = :ifirst_name,
        last_name = :ilast_name,
        middle_name = :imiddle_name,
        city = :icity
      where emp_id = :iemp_id;
  end /*
  else if (:iflag = 'D') then
  begin
    null;
  end
  */
  suspend;
end^


ALTER PROCEDURE IUD_TEAM (
    IFLAG CHAR(1),
    ITEAM_ID INTEGER,
    ITEAM_NAME VARCHAR(500))
RETURNS (
    OTEAM_ID INTEGER)
AS
begin
  if (:iflag = 'I' or :iflag = 'U' ) then
  begin
    if (:iflag = 'I') then
      insert into team(team_name)
      values(:iteam_name)
      returning team_id into oteam_id;
    else
      update team
      set team_name = :iteam_name
      where team_id = :iteam_id;
  end /*
  else if (:iflag = 'D') then
  begin
    null;
  end
  */


  suspend;
end^


ALTER PROCEDURE IUD_VACANCY (
    IFLAG CHAR(10),
    IVAC_ID INTEGER,
    IVAC_NAME VARCHAR(500),
    ICOMPANY_ID INTEGER,
    ISALARY_FROM DOUBLE PRECISION,
    ISALARY_TO DOUBLE PRECISION,
    IEXPERIENCE DOUBLE PRECISION,
    IVAC_TYPE INTEGER,
    ICITY VARCHAR(500))
RETURNS (
    OVAC_ID INTEGER)
AS
begin
  if (:iflag = 'I' or :iflag = 'U' ) then
  begin
    if (:iflag = 'I') then
      insert into vacancy(vac_name, company_id, salary_from, salary_to, experience, vac_type, city)
      values(:ivac_name, :icompany_id, :isalary_from, :isalary_to, :iexperience, :ivac_type, :icity)
      returning vac_id into ovac_id;
    else
      update vacancy
      set
        vac_name = :ivac_name,
        company_id = :icompany_id,
        salary_from = :isalary_from,
        salary_to = :isalary_to,
        experience = :iexperience,
        vac_type = :ivac_type,
        city = :icity
      where vac_id = :ivac_id;
  end /*
  else if (:iflag = 'D') then
  begin
    null;
  end
  */
  suspend;
end^



SET TERM ; ^

